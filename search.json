[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R basics for Research",
    "section": "",
    "text": "This book is a gentle introduction on how to program in R. Hands-on examples show challenges that researchers frequently face and how to overcome common issues associated to data wrangling and visualization."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Setting things up",
    "section": "",
    "text": "To install R, go to this link. At the top of the web page, you have three links for downloading R, depending on your operating system. If you are using Windows, follow “Download R for Windows” -> “base.” To install R on a Mac, click “Download R for Mac.” Then, choose the latest release depending on which Mac you have: Intel or Apple silicon."
  },
  {
    "objectID": "intro.html#installing-rstudio",
    "href": "intro.html#installing-rstudio",
    "title": "1  Setting things up",
    "section": "1.2 Installing RStudio",
    "text": "1.2 Installing RStudio\nRStudio is an integrated development environment for R and is highly recommended - it makes using R much more accessible. Download RStudio for free here. Follow the default instructions."
  },
  {
    "objectID": "intro.html#rstudio-tour",
    "href": "intro.html#rstudio-tour",
    "title": "1  Setting things up",
    "section": "1.3 Rstudio tour",
    "text": "1.3 Rstudio tour\nThe standard RStudio set-up consists of four panes. On the top left, you have scripts where you write code and save it. On the bottom left, you have the console. The console waits for you to run coding lines, process them, and show the results of what you did (it might also output an error message). The environment shows stored information on the top right and might also report the session’s memory usage. Finally, at the bottom right, you have plots and interactive views.\n\n\n\nRStudio\n\n\nIt is possible to customize your RStudio. For instance, you can change the appearance and pane layout. Go to Tools -> Global Options -> Appearance to change font size, and editor theme."
  },
  {
    "objectID": "intro.html#creating-a-script",
    "href": "intro.html#creating-a-script",
    "title": "1  Setting things up",
    "section": "1.4 Creating a Script",
    "text": "1.4 Creating a Script\nTo create a script, you can either click on the top left icon and then R script or press Shift + Control/Command + N. Scripts are handy to save your work and organize tasks. For instance, if you have a project that demands data cleaning, visualization, and model estimation, you might want to create different scripts to deal with various tasks."
  },
  {
    "objectID": "intro.html#dealing-with-packages",
    "href": "intro.html#dealing-with-packages",
    "title": "1  Setting things up",
    "section": "1.5 Dealing with Packages",
    "text": "1.5 Dealing with Packages\nAlthough the base system contains many built-in tools, you will need to install packages to perform many tasks. For instance, to create beautiful visualizations, you might want to use ggplot2, included in the tidyverse collection of R packages. To run regressions with many fixed effects, I suggest fixest. At this point, you know the drill. In the console, let’s try to install tidyverse typping install.packages(\"tidyverse\") (yes, between quotation marks).\nOnce you have the package installed, there is no need to install it again. However, to use the package, you need to call it first using library():\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n# tidyverse is a collection of super useful packages like ggplot2, dplyr, readr, etc...\n\nAnother detail here is the use of # in the script. If you use # before your coding lines, R won’t run them. # is also helpful if you want to make comments within your code."
  },
  {
    "objectID": "intro.html#installing-r-markdown",
    "href": "intro.html#installing-r-markdown",
    "title": "1  Setting things up",
    "section": "1.6 Installing R Markdown",
    "text": "1.6 Installing R Markdown\nTo install Rmarkdown, write in the console:\n# Install from CRAN\ninstall.packages('rmarkdown')\nTo generate PDF output, you will need to install LaTeX. Your machine might already have MikTeX, but TinyTex is highly recommended. Again in the console:\ninstall.packages('tinytex')\ntinytex::install_tinytex()"
  },
  {
    "objectID": "intro.html#creating-an-r-markdown-document",
    "href": "intro.html#creating-an-r-markdown-document",
    "title": "1  Setting things up",
    "section": "1.7 Creating an R Markdown Document",
    "text": "1.7 Creating an R Markdown Document\nR Markdown documents are fully reproducible and allow the use of multiple languages (R, Python, SQL). If you are teaching a class that demands to code, R Markdown will make grading much easier since the PDF would display the R coding chunk and the output right after.\nTo create an R Markdown document, click on the top left and R Markdown… -> Document. Then, choose the output format. If you want to know more about R Markdown, check Xie, Allaire, and Grolemund (2018)."
  },
  {
    "objectID": "intro.html#creating-a-project",
    "href": "intro.html#creating-a-project",
    "title": "1  Setting things up",
    "section": "1.8 Creating a Project",
    "text": "1.8 Creating a Project\nA Project helps you to organize all the files related to a specific task:\n\nA paper you are writing.\nA replication you are doing.\nMaybe a homework assignment you have.\n\nIn that sense, a Project is a folder where you keep all the scripts, data, tables, and results of whatever the task is. Important to mention that keeping everything in one place avoids trouble with the working directory.\nOn the top left (second icon), you have the option to create a new Project. Then, New Directory -> New Project. You need to give it a name and locate it (for instance, on the Desktop). Note that you need to open the Project before opening its scripts.\n\n1.8.1 Exercise\nCreate an R Project and scripts to use during the workshop.\n\n\n\n\nXie, Yihui, Joseph J Allaire, and Garrett Grolemund. 2018. R Markdown: The Definitive Guide. Chapman; Hall/CRC."
  },
  {
    "objectID": "start.html",
    "href": "start.html",
    "title": "2  Getting Started with R",
    "section": "",
    "text": "Math expressions are generally accepted in R. For instance if you type 2+2 the console will output 4.\n\n2+2\n\n[1] 4\n\n\nNow, try -, *, /, and ^ (for raising to a power). Besides that, there are many built-in math functions - check some of them here.\nWhat you will mostly do is to create objects. For example:\n\nodd<-c(1,3,5,7,9,11)\nodd\n\n[1]  1  3  5  7  9 11\n\n\nodd is a vector containing some odd numbers. A few details: c() concatenates its arguments (odd numbers from 1 to 11) to form a vector named odd. Another way to do it is using seq() :\n\nodd<-seq(from=1, to=11, by=2)\nodd\n\n[1]  1  3  5  7  9 11\n\n\nYou can easily apply functions to objects:\n\nmean(odd)\n\n[1] 6\n\nsum(odd)\n\n[1] 36\n\nmax(odd)\n\n[1] 11\n\nmin(odd)\n\n[1] 1\n\n\nLogical tests are common when dealing with data and now is a good time to get some practice. Test equality with == and inequality with <=, <, !=, >, or >=.\n\n4/2==2 # Is 4 divided by 2 equal to 2? \n\n[1] TRUE\n\n2!=3 # Is 2 different than 3? \n\n[1] TRUE\n\n2>10/5 # Is two greater than 10 divided by 5? \n\n[1] FALSE\n\n\nIt is very common to check whether something belongs to a group, and %in% is very helpful in this case:\n\n2 %in% odd # 2 does not belongs to odd\n\n[1] FALSE\n\n\nFinally, we need to talk about & (and) and | (or):\n\n2 %in% odd | 3 %in% odd # does 2 or 3 belong to odd?\n\n[1] TRUE\n\n\n\n2 %in% odd & 3 %in% odd # does 2 and 3 belong to odd?\n\n[1] FALSE\n\n\nThroughout your research, you will constantly work with strings. Any value written within a pair of single or double quotes in R is treated as a string. Below you have stored Hi and Marcelino.\n\nhi<-\"Hi\"\nname<-\"Marcelino\"\n\nThe function paste() puts things together with any separator:\n\npaste(hi, name, sep=\" \") # separating strings with space\n\n[1] \"Hi Marcelino\"\n\n\nAnother useful function is sample(). It takes a sample of the specified size from the elements of a vector using either with or without replacement. Before using sample(), to make sure we get the same results, lets start the code chunk with set.seed(123).\n\nset.seed(123)\nnumbers<-seq(1:1000)\nsample(numbers, size=2, replace = TRUE) # a random sample size 2 of numbers from 1 to 1000 (with replacement)\n\n[1] 415 463\n\nsample(numbers, size=10, replace=FALSE) # a random sample size 10 of numbers from 1 to 1000 (without replacement)\n\n [1] 179 526 195 938 818 118 299 229 244  14\n\n\nYou can also use a sample with strings:\n\nfruits<-c(\"apple\", \"orange\", \"lime\")\nsample(fruits, size=2) ## replace is False by default \n\n[1] \"orange\" \"apple\" \n\n\n\n\n\nUse sample() to simulate a fair coin toss 6 and 1,000 times. Does it look like a fair coin?\n\nHint: create a vector c(“H”, “T”) and use sample() with different sizes. Should you use replace = False or replace = True?\n\nLet’s play dice! When you roll a fair die, you expect to get 1,2,3,4,5, and 6 with the same probability \\(\\frac{1}{6}\\). Hence, the mathematical expectation of that process is:\n\n\\[E[X]= \\frac{1}{6}[1+2+3+4+5+6] = 3.5\\]\nAccording to the Law of Large Numbers, if you play long enough, the sample average will get close to 3.5. Now, let’s look at the histograms for each set of averages according to the sample size (number of rolls). We start rolling a dice two times, and we repeat this process 500 times. The resulting distribution is called “the sampling distribution of the sample mean.”\n\nroll<-sample(1:6, size=2, replace=TRUE)\nmean(roll)\n\n[1] 2.5\n\n\nUsing the function replicate() to repeat this process 500 times and plotting the histogram using hist():\n\nhist(replicate(500,mean(sample(1:6, size=2, replace=TRUE ))), main=\" \", xlab = \"Average of 2 rolls\")\n\n\n\n\nYour turn! Roll dice 100 times and repeat the process again, plotting the histogram. Does this distribution look familiar?"
  },
  {
    "objectID": "start.html#data-with-r",
    "href": "start.html#data-with-r",
    "title": "2  Getting Started with R",
    "section": "2.2 Data with R",
    "text": "2.2 Data with R\n\n2.2.1 Data Types\nThe table below summarizes the data types you usually face when working in R:\n\nData Types\n\n\n\n\n\n\nType\nDefinition\n\n\n\n\nDouble\nA vector containing real values\n\n\nInteger\nA vector containing integer values\n\n\nCharacter\nA vector containing character values (e.g., “Dog”, “1”)\n\n\nLogical\nA vector containing logical values (TRUE, FALSE)\n\n\nFactor\nFactors are used to describe items that can have a finite number of values (“male”, “female”)\n\n\n\nFactors look like character vectors, but possess a levels attribute that assigns names to each level, or distinct value, in the vector.\nUse the str() function to identify data types within data structures.\n\n\n2.2.2 Data Structures\n\n2.2.2.1 Vectors\nYou can create a vector by combining elements of the same type together using the concatenate function c().\n\nvec1<-c(-10:10)\nvec1\n\n [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7   8\n[20]   9  10\n\n\nWhat happens if you have a string and numbers in the same vector?\n\nvec2<-c(-10:10, \"cat\")\nvec2\n\n [1] \"-10\" \"-9\"  \"-8\"  \"-7\"  \"-6\"  \"-5\"  \"-4\"  \"-3\"  \"-2\"  \"-1\"  \"0\"   \"1\"  \n[13] \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"cat\"\n\n\nMore on data types later! You can use [ ] to locate elements within vectors:\n\nvec2[22]\n\n[1] \"cat\"\n\n\nOne additional useful function is which() . If you want to find out the position of numbers greater than zero within vec:\n\nwhich(vec1>0)\n\n [1] 12 13 14 15 16 17 18 19 20 21\n\n\nIf you want to find out who are these numbers:\n\nvec1[which(vec1>0)]\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nWhat happens when you try this using vec2 instead?\n\n\n2.2.2.2 Matrices\nThe matrix is a two-dimensional data structure composed of elements of the same data type.\n\nmatrix1<-matrix(1:4, ncol=2, nrow=2)\nmatrix1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nLet’s multiply two matrices:\n\nmatrix2<-matrix(6:9, ncol=2, nrow=2)\nmatrix3<-matrix1 %*% matrix2\n\nTo find out elements of a matrix you can still use [ ] :\n\nmatrix3[2,2]\n\n[1] 52\n\n\n\n\n2.2.2.3 Lists\nA list is a general form of a vector, where the elements don’t need to be of the same type or dimension. You can easily combine arguments:\n\nlist1<-list(seq(1:10), c(\"Cat\", \"Dog\"), matrix(1:6, ncol=3, nrow=2))\nlist1\n\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n[1] \"Cat\" \"Dog\"\n\n[[3]]\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nGiven the output you are seeing, how to locate the elements within a list?\n\n\n2.2.2.4 Dataframes\nR usually refers to datasets as dataframes. A data frame is like a list of vectors combined into a matrix-like structure. You can have different columns of different types. Let’s create a dataframe:\n\nGDP<-c(10000, 11000, 12431, 500 )\ncountry<-c(\"Bolivia\", \"Brazil\", \"Chile\", \"Argentina\")\n\ndf<-data.frame(GDP, country)\ndf\n\n    GDP   country\n1 10000   Bolivia\n2 11000    Brazil\n3 12431     Chile\n4   500 Argentina"
  },
  {
    "objectID": "start.html#reading-files",
    "href": "start.html#reading-files",
    "title": "2  Getting Started with R",
    "section": "2.3 Reading files",
    "text": "2.3 Reading files\nIn this example, we will use data from the RAND Health Insurance Experiment (HIE), and there are two datasets. Here you have demographic information about the subjects in the study and also health variables (outcomes) both before and after the experiment. The other file (here) has information about health care spending. Finally, here you have a summary of the RAND HIE. To read .RDS files, use the readRDS() function.\n\nrand_sample<-readRDS(\"rand_sample.RDS\")\nrand_spend<-readRDS(\"rand_spend.RDS\")\n\nIf you want to see the first values on that dataset, you can use the function head( ) or use View(rand_sample) to open the dataframe in a new tab.\n\n#head(rand_spend,5)\n#View(rand_spend)\n\nBesides the column plantype, which identifies the assigned insurance group of each individual, the variables that we are looking for are displayed below:\n\n\n\n\nVariables Description\n \n  \n    Variable \n    Definition \n  \n \n\n  rand_sample file\n\n    female \n    Female \n  \n  \n    blackhisp \n    Nonwhite \n  \n  \n    age \n    Age \n  \n  \n    educper \n    Education \n  \n  \n    income1cpi \n    Family Income \n  \n  \n    hosp \n    Hospitalized last year \n  \n  \n    ghindx \n    General Health Index (before) \n  \n  \n    cholest \n    Cholesterol (mg/dl) (before) \n  \n  \n    systol \n    Systolic blood pressure (mm Hg) (before) \n  \n  \n    mhi \n    Mental Health Index (before) \n  \n  \n    ghindxx \n    General Health Index (after) \n  \n  \n    cholestx \n    Cholesterol (mg/dl) (after) \n  \n  \n    systolx \n    Systolic blood pressure (mm Hg) (after) \n  \n  \n    mhix \n    Mental Health Index (after) \n  \n  rand_spend file\n\n    ftf \n    Face-to-face visits \n  \n  \n    out_inf \n    Outpatient expenses \n  \n  \n    totadm \n    Hospital admissions \n  \n  \n    inpdol_inf \n    Inpatient expenses \n  \n  \n    tot_inf \n    Total expenses \n  \n\n\n\n\n\nIn case you have .csv, you might want to use read_csv(). Also, check the package readxl (here) if you need to load excel files."
  },
  {
    "objectID": "datai.html",
    "href": "datai.html",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "",
    "text": "Tidyverse is a collection of packages that helps you with data management and visualization. Let’s keep playing with the Rand HIE data:\nYou can also check the dataset using the function glimpse() (tidyverse package). Then you have a good look at all the 319 columns in this dataset:"
  },
  {
    "objectID": "datai.html#select-arrange-group_by-and-summarize",
    "href": "datai.html#select-arrange-group_by-and-summarize",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.1 select(), arrange(), group_by(), and summarize()",
    "text": "3.1 select(), arrange(), group_by(), and summarize()\nLet’s say you want to compare demographic characteristics of the individuals in the RAND HIE across health insurance groups. To do that, you just need the functions group_by() and summarize() from the tidyverse package. Since there are some missing observations (NA), allow the function mean() to ignore those NAs.\nBefore doing that, let’s first select the columns plantype (assigned insurance) female (1 if female, 0 otherwise) blackhisp (1 if black or hispanic, 0 otherwise) age, educper (education), and income1cpi (income).\n\nsub_data<-rand_sample%>%select(plantype, female, blackhisp, age, educper, income1cpi)\n## check the new dataframe with View(sub_data)\n\nThen, using sub_data:\n\nsub_data%>%\n  group_by(plantype)%>%\nsummarize(\n  Female=mean(female, na.rm=T), \n  Nonwhite=mean(blackhisp, na.rm=T),              Age=mean(age, na.rm=T), \n  Education=mean(educper, na.rm=T), \n  `Family Income`=mean(income1cpi, na.rm=T),\n  `Number enrolled`=n())\n\n# A tibble: 4 × 7\n  plantype     Female Nonwhite   Age Education `Family Income` `Number enrolled`\n  <fct>         <dbl>    <dbl> <dbl>     <dbl>           <dbl>             <int>\n1 Catastrophic  0.560    0.172  32.4      12.1          31603.               759\n2 Deductible    0.537    0.153  32.9      11.9          29499.               881\n3 Coinsurance   0.535    0.145  33.3      12.0          32573.              1022\n4 Free          0.522    0.144  32.8      11.8          30627.              1295\n\n\nThe function arrange() allows you arrange values within a variable in ascending or descending order. For instance, if you want to arrange the individuals in the rand_sample by income:\n\nsub_data%>%arrange(income1cpi)\n\n# A tibble: 3,957 × 6\n   plantype     female blackhisp   age educper income1cpi\n   <fct>         <dbl>     <dbl> <dbl>   <dbl>      <dbl>\n 1 Catastrophic      1         0    30      11          0\n 2 Coinsurance       0         0    53       3          0\n 3 Coinsurance       1         0    19      12          0\n 4 Free              0         0    36      12          0\n 5 Catastrophic      1         0    42      16          0\n 6 Coinsurance       1         1    25      11          0\n 7 Coinsurance       0         1    35      12          0\n 8 Coinsurance       1         0    22      12          0\n 9 Free              1         0    34      12          0\n10 Free              1         0    50      11          0\n# … with 3,947 more rows\n\n\nIf you want to arrange by descending order:\n\nsub_data%>%arrange(desc(income1cpi))\n\n# A tibble: 3,957 × 6\n   plantype     female blackhisp   age educper income1cpi\n   <fct>         <dbl>     <dbl> <dbl>   <dbl>      <dbl>\n 1 Catastrophic      0        NA    21      15     89132.\n 2 Catastrophic      1         0    20      13     89132.\n 3 Catastrophic      0        NA    19      13     89132.\n 4 Catastrophic      0         0    51      16     89132.\n 5 Free              1         0    36      17     79757.\n 6 Free              0        NA    14      NA     79757.\n 7 Free              0         0    42      17     79757.\n 8 Catastrophic      1         0    31      17     78775.\n 9 Coinsurance       0         0    40      16     77230.\n10 Coinsurance       1         0    40      14     77230.\n# … with 3,947 more rows\n\n\nIt is also easy to check the top 5 and bottom 10:\n\nsub_data%>%select(income1cpi)%>%top_n(2)\n\nSelecting by income1cpi\n\n\n# A tibble: 4 × 1\n  income1cpi\n       <dbl>\n1     89132.\n2     89132.\n3     89132.\n4     89132.\n\nsub_data%>%select(income1cpi)%>%top_n(-10)\n\nSelecting by income1cpi\n\n\n# A tibble: 33 × 1\n   income1cpi\n        <dbl>\n 1          0\n 2          0\n 3          0\n 4          0\n 5          0\n 6          0\n 7          0\n 8          0\n 9          0\n10          0\n# … with 23 more rows"
  },
  {
    "objectID": "datai.html#filter-mutate-and-ifelse",
    "href": "datai.html#filter-mutate-and-ifelse",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.2 filter(), mutate(), and ifelse()",
    "text": "3.2 filter(), mutate(), and ifelse()\nLet’s say you only want to work with two types of participants: the ones with either “Free” or “Catastrophic” insurance. To do that, apply the filter() function:\n\ncat_vs_free<-rand_sample%>%filter(plantype==\"Catastrophic\"|plantype==\"Free\")\n\nOn top of that, you might want to identify the categories with numbers: a dummy variable that takes on one if plantype==\"Free\" and zero otherwise (you can also think about the dummies we already have for female, nonwhite, etc.). Sometimes, it is just easier to work with numbers than strings. For that task we could use ifelse() together with mutate().\n\ncat_vs_free<-cat_vs_free%>%\n  mutate(\n    dummy_plan=ifelse(plantype==\"Free\",1,0)\n         )\n\nA few details. ifelse() is base R, and a tidyverse alternative is case_when() - we will talk about it later."
  },
  {
    "objectID": "datai.html#exercise-i-racial-discrimination-in-the-labor-market",
    "href": "datai.html#exercise-i-racial-discrimination-in-the-labor-market",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.3 Exercise I: Racial Discrimination in the Labor Market",
    "text": "3.3 Exercise I: Racial Discrimination in the Labor Market\nWe will use a dataset here from a randomized experiment conducted by Marianne Bertrand and Sendhil Mullainathan for this question. The researchers sent 4,870 fictitious resumes out to employers in response to job adverts in Boston and Chicago in 2001. They varied only the names of job applicants while leaving other relevant candidates’ attributes unchanged (i.e., candidates had similar qualifications). Some applicants had distinctly white-sounding names such as Greg Baker and Emily Walsh, whereas other resumes contained stereotypically black-sounding names such as Lakisha Washington or Jamal Jones. Hence, any difference in callback rates can solely be attributed to name manipulation.\n\nCreate a dummy variable named female that takes one if sex==\"f\", and zero otherwise.\nThe dataset contains information about candidates’ education (education), years of experience (yearsexp), military experience (military), computer and special skills (computerskills and specialskills), a dummy for gender (female), among others. Summarize that information by getting average values by race groups."
  },
  {
    "objectID": "datai.html#exercise-ii-the-tennessee-star-experiment",
    "href": "datai.html#exercise-ii-the-tennessee-star-experiment",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.4 Exercise II: The Tennessee STAR experiment",
    "text": "3.4 Exercise II: The Tennessee STAR experiment\n“Education production” is an area much explored by economists. The terminology reflects that we think of features of the school environment as inputs that cost money, while student learning is the output that schools produce. A major question in the field is which inputs have the highest benefit/cost ratio, and one very costly input is class size. An important experiment conducted in Tennessee was designed to precisely answer the question “Does class size impacts student performance?”. \nKrueger (1999) analyzed the Project STAR, a longitudinal study that randomly assigned kindergarten students and their teachers to one of three groups beginning in the 1985–1986 school year. The three groups were small classes (13–17 students per teacher), regular-size classes (22–25 students), and regular/aide classes (22–25 students) which also included a full-time teacher’s aide. After their initial assignment, the design called for students to remain in the same class type for four years. Some 6000–7000 students were involved in the project each year. You can find part of the sample related to students who entered STAR in kindergarten here to answer the following questions.\n1. Create the dummy variables Free_lunch (takes 1 if lunch is “free”), White_asian (equal 1 if ethnicity is either “cauc” or “asian”) and Female - takes 1 if gender is “female”. Also, define the variable age as 1986-birth, i.e., compute the age of the children in 1986.\n2. The first question to ask about a randomized experiment is whether the randomization successfully balanced the subject’s characteristics across different groups. Although the STAR data failed to include any pretreatment test scores, we can look at some characteristics of students such as race, gender, age, and free lunch status, which is a good measure of family income since only poor children qualify for free school lunch. Compare the values of Free_lunch, White_asian, Female, and age across the three groups small, regular, regular+aide. Do these variables look balanced?"
  },
  {
    "objectID": "datai.html#merging-datasets",
    "href": "datai.html#merging-datasets",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.5 Merging datasets",
    "text": "3.5 Merging datasets\nSometimes you get information from different sources but want to analyze all together. When that happens, one can use merge() or the many “joins” available on tidyverse(). Say you want to put together two datasets: one with socioeconomic information about counties (here) and another that has health indicators also at the county level (here) The first step is to load both of them:\n\nlibrary(tidyverse)\nHHincome<-read_csv(\"HHincome18.csv\", col_names = TRUE) ## col_names is TRUE because all the columns have names in the first row\nhealth_data<-readRDS(\"health_data.RDS\")\n\nA few details here. Since the .csv file has column names, we have col_names=T. Also, the function read_csv() belongs to tidyverse and you need to call the package first.\nTo put the two datasets (income and health) together, you can use join function. There are some details here. You have 3,275 counties (rows) in HHincome, but only 3,141 counties in health_data. Here I will use left_join restricting the merge to those 3,141 counties inside health_data. Check the other join types here. Using the function dim() you will realize that your new data has 3,141 rows and 9 columns.\n\nfull_data<-left_join(health_data, HHincome,by = \"FIPStxt\")\ndim(full_data)\n\n[1] 3141    9"
  },
  {
    "objectID": "datai.html#drop_na-and-replace_na",
    "href": "datai.html#drop_na-and-replace_na",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.6 drop_na() and replace_na()",
    "text": "3.6 drop_na() and replace_na()\nYou will frequently face datasets that have columns with missing information. Sometimes, you need to replace NAs by zero, sometimes you drop the entire row and ignore that unit of observation. Let’s see how that works. First, create a new “full_data” but this time using the right_join() . Can you explain the difference between these joins?\n\nfull_data2<-right_join(health_data, HHincome,by = \"FIPStxt\")\n#View(full_data2)\ndim(full_data2)\n\n[1] 3275    9\n\n\nNow you have 3,275 counties, but some of them do not have health indicators and you might want to drop these places:\n\nfull_data2<-full_data2%>%drop_na()\ndim(full_data2)\n\n[1] 3134    9\n\n\nTo replace NAs by zero (or something else) instead, check replace_na()."
  },
  {
    "objectID": "datai.html#exercise-iii-in-and-notin-more-summarize",
    "href": "datai.html#exercise-iii-in-and-notin-more-summarize",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.7 Exercise III: %in% and %notin% more summarize()",
    "text": "3.7 Exercise III: %in% and %notin% more summarize()\n1. Instead of using %in%, you might want to try %notin%. Base R does not provide a %notin% function, so we will need to create it:\n\n`%notin%`<-Negate(`%in%`)\n\nAnd here is the question: which counties in full_data are not in full_data2?\n2. Using full_data2, get the top 5 and bottom 10 counties in terms of % of people eligible for Medicare. Check also the top 5 and bottom 10 states concerning the total ICU beds.\nHint: The column EligibleforMedicare18 refers to the number of people eligible for Medicare per county in 2018. Note that you also have the estimated 2018 population (PopulationEstimate2018 column)."
  },
  {
    "objectID": "datai.html#group_by-and-ungroup",
    "href": "datai.html#group_by-and-ungroup",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.8 group_by() and ungroup()",
    "text": "3.8 group_by() and ungroup()\nWe already saw how group_by works. But what if you want to preserve your dataset but add a new column with some group level information? For instance, what if you want to add a column with state-level information about total ICU beds?\n\nfull_data2<-full_data2%>%\n  group_by(StateName)%>%\n  mutate(\n    StateICU=sum(ICU_beds)\n    )%>%\n  ungroup()"
  },
  {
    "objectID": "datai.html#exercise-iv-airbnb-and-chicago-communities",
    "href": "datai.html#exercise-iv-airbnb-and-chicago-communities",
    "title": "3  Data Wrangling with Tidyverse",
    "section": "3.9 Exercise IV: Airbnb and Chicago Communities",
    "text": "3.9 Exercise IV: Airbnb and Chicago Communities\nThe first dataset Airbnb.RDS refers to Airbnb rentals, socioeconomic indicators, and crime by community area in Chicago. The Communities.xls file contains health and socioeconomic indicators for the 77 community areas of Chicago, 2012-2014.\n\nImport both datasets and use View() to check them.\nMerge the datasets using the function full_join(). What is the dimension of your new dataset? What variables do they have in common (variables with the same column name)?\n\nThe Airbnb data has the columns area and dist. They represent the total community area and the distance (in km) from the community to Chicago downtown, respectively.\n\nYou want to work only with the following columns: community, price_pp, num_spots, rev_rating, PerCInc14 , num_theft, FirearmM ,unemployed, harship_in, Pop2014, BirthRate, Over65, dist, and area. Select only those variables and store them in a new data frame.\nCreate the new variable theft_rate dividing the total number of thefts by the population in 2014.\nFirst, divide the total population in 2014 by the community’s area to get values for population density (number of people per square mile). Then, create the new variable logdens, taking the natural logarithm of population density.\nFilter your new dataset to identify Central Chicago. In other words, you want to filter communities within 3km from Chicago downtown. What is the average number of Airbnb spots in Central Chicago? What are the average Airbnb prices, per capita income, theft rate, firearm-related deaths, population density, and birth rate in Central Chicago?\nFinally, compare the values for the same variables in Central Chicago with the average numbers from “Far from downtown” - the communities that have a distance from downtown higher than 19 km."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Xie, Yihui, Joseph J Allaire, and Garrett Grolemund. 2018. R\nMarkdown: The Definitive Guide. Chapman; Hall/CRC."
  }
]